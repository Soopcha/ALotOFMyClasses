package ru.vsu.Malykhina;

import java.util.Random;

public class Arrays {
    public static void main(String[] args) {
        int[] nums = {1, 1, 1, 1, 1};   // [] обозначают, что это МАССИВ  ///  [] можно и после имени массива
        /////////////[0][1][2][3][4] - нумерация  с 0 (ИНДЕКСЫ)

        int nums2[] = {1, 1, 1, 1, 1};   // также можно записать тоже, но лучше тот варик


        int[] num3 = new int[4]; // в переменной лежит не число лежит ссылка на массив
        // new - создай нам в памяти новый массив на 4 ячейки(ИНДЕКС также с 0)
        // и мы присваиваем в переменную num3 ссылку на массив
        for (int i = 0; i < 4; i++) {
            num3[i] = i; // присваиваем ячейкам массива числа от 0 до 4

        }

        num3[3] = 100;

        for (int i = 0; i < 4; i++) {
            System.out.println("Элемент [" + i + "]" + num3[i]);
        }

        //те переменная е теперь представляет элемент массива, по порядочку
        for (int e : num3) {
            e = e - 5;
            System.out.println(e);
        }

        //МНОГОМЕРНЫЕ МАССИВЫ (массивы внутри массива)
        // [[] [] [] []]
        int table[][] = new int[3][4];
        // (тип данных)[говорим что это массив][говорим что там внутри ещё массив] =
        // (резервируем память) (говорим тип данных)[сколько массивов][сколько у этих массивов ячеек]
        //те 3 массива по 4 ячейки

        int table2[][] = new int[3][];// можно эти данный присвоить позже
        table2[0] = new int[4];     // обратились к 1 массиву и создаём ячейку памяти int и СОЗДАЁМ 4 ячейки
        table2[1] = new int[4];     // можем отдельно работать с каждым массивом внутри большого массива
        table2[2] = new int[40];


        // ИНФА С УРОКА СОЛОМЫ
        // Как можно задавать массив:
        int[] arr1 = new int[5];
        int[] arr2 = new int[]{1, 2, 3, 4, 5, 5};
        double[] arr3 = {1, 2.3, 4, 5.67}; // Синтаксический сахар - конструкция языка, которая полностью дублирует уже имеющиеся
        // возможности, но при этом обладает преимуществом в удобстве/краткости/похожести/стилистике.

        //Пример: вывод массива, заполненного случайными числами
        int[] arr4 = new int[10];
        System.out.println(arr4.length); // arr4.length = 10б но эл. от 0 до 9 индексами

        Random rnd = new Random();
        for (int i = 0; i < arr1.length; i++) {
            arr4[i] = rnd.nextInt(100);// от 0 до 99   Метод nextInt () считывает и возвращает введенное число.
        }

        for (int i = 0; i < arr4.length; i++) {
            System.out.print((i > 0 ? ", " : "") + arr4[i]);
            // если i > 0 (те эл с индексом 1 и далее) пишем "," ИНАЧЕ пробел (до первого выведенного эл получается)
        }
        System.out.println();

        // ещё одна версия цикла for если не надо запоминать индекс
        double[] arr5 = {3, 4, 5.5, 6, 0.03};

        double sum = 0;
        for (double item : arr5) { // for пробегает по элементам массива
            // тело цикла выполнится столько раз, сколько эл в массиве
            // переменная item - последовательно примет значения 3, 4 ,5.5, 6, 0.03
            sum += item;
        }

        int[] arr6 = {3, 4, 5, 6, 3};

        // опробуем наш пузырь
        bubbleSotr(arr6);
        for (int i = 0; i < arr6.length; i++) {
            System.out.print((i > 0 ? ", " : "") + arr6[i]);
        }
    }

    // метод пузырька - сортировка массива (сравниваем по паре два идуих друг за другом эл массива)

    public static void bubbleSotr(int[] arr) {
        for (int i = arr.length - 1; i >= 0; i--) {
            for (int j = 0; j < i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }
    }
}
